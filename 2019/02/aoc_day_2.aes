@compiler >= 4.2.0
include "List.aes"
contract Day2 =

  entrypoint solve_1() =
    run(0, setup_and_init_mem(12, 2))

  entrypoint solve_2() =
    let mem   = setup_mem(0, input(), {})
    let range = [0..99]
    let vals  = [ (x, y) | x <- range, y <- range ]
    solve_2'(mem, vals)

  function
    solve_2' : (map(int, int), list(int * int)) => int
    solve_2'(mem, (n, v) :: vals) =
      let res = run(0, init_mem(n, v, mem))
      if(res == 19690720) 100 * n + v
      else                solve_2'(mem, vals)

  entrypoint run(pc : int, m : map(int, int)) =
    switch(m[pc])
      99 => m[0]
      1  =>
        let x = m[pc + 1]
        let y = m[pc + 2]
        let z = m[pc + 3]
        run(pc + 4, m{[z] = m[x] + m[y]})
      2 =>
        let x = m[pc + 1]
        let y = m[pc + 2]
        let z = m[pc + 3]
        run(pc + 4, m{[z] = m[x] * m[y]})

  function setup_and_init_mem(noun : int, verb : int) =
    let mem = setup_mem(0, input(), {})
    init_mem(noun, verb, mem)

  function
    setup_mem : (int, list(int), map(int, int)) => map(int, int)
    setup_mem(_, [], m) = m
    setup_mem(ix, x :: xs, m) = setup_mem(ix + 1, xs, m{[ix] = x})

  function init_mem(noun : int, verb : int, mem : map(int, int)) =
    mem{ [1] = noun, [2] = verb }

  function input() =
    [1,0,0,3,1,1,2,3,1,3,4,3,1,5,0,3,2,1,10,19,1,9,19,23,1,13,23,27,1,5,27,31,2,31,6,35,1,35,5,39,1,9,39,43,1,43,5,47,1,47,5,51,2,10,51,55,1,5,55,59,1,59,5,63,2,63,9,67,1,67,5,71,2,9,71,75,1,75,5,79,1,10,79,83,1,83,10,87,1,10,87,91,1,6,91,95,2,95,6,99,2,99,9,103,1,103,6,107,1,13,107,111,1,13,111,115,2,115,9,119,1,119,6,123,2,9,123,127,1,127,5,131,1,131,5,135,1,135,5,139,2,10,139,143,2,143,10,147,1,147,5,151,1,151,2,155,1,155,13,0,99,2,14,0,0]